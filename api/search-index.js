var searchIndex = {};
searchIndex['seax'] = {"items":[],"paths":[]};
searchIndex['seax_scheme'] = {"items":[[0,"","seax_scheme","Library for compiling Scheme programs to Seax SVM bytecode.",null,null],[3,"ForkTable","","An associative map data structure for representing scopes.",null,null],[5,"compile","","Compile a Scheme program into a list of SVM cells (a control stack)",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"ast","","Contains the Scheme abstract syntax tree (AST).",null,null],[3,"RootNode","seax_scheme::ast","AST node for the root of a program's AST",null,null],[12,"exprs","","",0,null],[3,"SExprNode","","AST node for an S-expression.",null,null],[12,"operator","","",1,null],[12,"operands","","",1,null],[3,"ListNode","","AST node for a list literal",null,null],[12,"elements","","",2,null],[3,"NameNode","","AST node for an identifier",null,null],[12,"name","","",3,null],[3,"IntNode","","AST node for an integer constant",null,null],[12,"value","","",4,null],[3,"UIntNode","","AST node for an unsigned integer constant",null,null],[12,"value","","",5,null],[3,"FloatNode","","AST node for a floating-point constant",null,null],[12,"value","","",6,null],[3,"BoolNode","","AST node for a boolean constant",null,null],[12,"value","","",7,null],[3,"CharNode","","AST node for a character constant",null,null],[12,"value","","",8,null],[3,"StringNode","","AST node for a  string constant",null,null],[12,"value","","",9,null],[4,"ExprNode","","Expression",null,null],[13,"Root","","",10,null],[13,"SExpr","","",10,null],[13,"Name","","",10,null],[13,"ListConst","","",10,null],[13,"NumConst","","",10,null],[13,"BoolConst","","",10,null],[13,"StringConst","","",10,null],[13,"CharConst","","",10,null],[4,"NumNode","","",null,null],[13,"IntConst","","",11,null],[13,"UIntConst","","",11,null],[13,"FloatConst","","",11,null],[6,"SymTable","","The symbol table for bound names is represented as a\n`ForkTable` mapping `&str` (names) to `(uint,uint)` tuples,\nrepresenting the location in the `$e` stack storing the value\nbound to that name.",null,null],[6,"CompileResult","","A `CompileResult` is either `Ok(SVMCell)` or `Err(&str)`",null,null],[8,"ASTNode","","Trait for AST nodes.",null,null],[10,"compile","","Compile this node to a list of SVM expressions",12,{"inputs":[{"name":"astnode"},{"name":"symtable"}],"output":{"name":"compileresult"}}],[11,"prettyprint","","Pretty-print this node",12,{"inputs":[{"name":"astnode"}],"output":{"name":"string"}}],[10,"print_level","","Pretty-print this node at the desired indent level",12,{"inputs":[{"name":"astnode"},{"name":"usize"}],"output":{"name":"string"}}],[11,"fmt","","",10,{"inputs":[{"name":"exprnode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"exprnode"},{"name":"exprnode"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"exprnode"},{"name":"exprnode"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"exprnode"}],"output":{"name":"exprnode"}}],[11,"compile","","",10,{"inputs":[{"name":"exprnode"},{"name":"symtable"}],"output":{"name":"compileresult"}}],[11,"print_level","","",10,{"inputs":[{"name":"exprnode"},{"name":"usize"}],"output":{"name":"string"}}],[11,"fmt","","",11,{"inputs":[{"name":"numnode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"numnode"},{"name":"numnode"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"numnode"},{"name":"numnode"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"numnode"}],"output":{"name":"numnode"}}],[11,"fmt","","",0,{"inputs":[{"name":"rootnode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"rootnode"},{"name":"rootnode"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"rootnode"},{"name":"rootnode"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"rootnode"}],"output":{"name":"rootnode"}}],[11,"compile","","",0,{"inputs":[{"name":"rootnode"},{"name":"symtable"}],"output":{"name":"compileresult"}}],[11,"print_level","","",0,{"inputs":[{"name":"rootnode"},{"name":"usize"}],"output":{"name":"string"}}],[11,"fmt","","",1,{"inputs":[{"name":"sexprnode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"sexprnode"},{"name":"sexprnode"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"sexprnode"},{"name":"sexprnode"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"sexprnode"}],"output":{"name":"sexprnode"}}],[11,"compile","","",1,{"inputs":[{"name":"sexprnode"},{"name":"symtable"}],"output":{"name":"compileresult"}}],[11,"print_level","","",1,{"inputs":[{"name":"sexprnode"},{"name":"usize"}],"output":{"name":"string"}}],[11,"fmt","","",2,{"inputs":[{"name":"listnode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"listnode"},{"name":"listnode"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"listnode"},{"name":"listnode"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"listnode"}],"output":{"name":"listnode"}}],[11,"compile","","",2,{"inputs":[{"name":"listnode"},{"name":"symtable"}],"output":{"name":"compileresult"}}],[11,"print_level","","",2,{"inputs":[{"name":"listnode"},{"name":"usize"}],"output":{"name":"string"}}],[11,"fmt","","",3,{"inputs":[{"name":"namenode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"namenode"},{"name":"namenode"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"namenode"},{"name":"namenode"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"namenode"}],"output":{"name":"namenode"}}],[11,"compile","","",3,{"inputs":[{"name":"namenode"},{"name":"symtable"}],"output":{"name":"compileresult"}}],[11,"print_level","","",3,{"inputs":[{"name":"namenode"},{"name":"usize"}],"output":{"name":"string"}}],[11,"fmt","","",4,{"inputs":[{"name":"intnode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"intnode"},{"name":"intnode"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"intnode"},{"name":"intnode"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"intnode"}],"output":{"name":"intnode"}}],[11,"compile","","",11,{"inputs":[{"name":"numnode"},{"name":"symtable"}],"output":{"name":"compileresult"}}],[11,"print_level","","",11,{"inputs":[{"name":"numnode"},{"name":"usize"}],"output":{"name":"string"}}],[11,"fmt","","",5,{"inputs":[{"name":"uintnode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"uintnode"},{"name":"uintnode"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"uintnode"},{"name":"uintnode"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"uintnode"}],"output":{"name":"uintnode"}}],[11,"fmt","","",6,{"inputs":[{"name":"floatnode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"floatnode"},{"name":"floatnode"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"floatnode"},{"name":"floatnode"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"floatnode"}],"output":{"name":"floatnode"}}],[11,"fmt","","",7,{"inputs":[{"name":"boolnode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"boolnode"},{"name":"boolnode"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"boolnode"},{"name":"boolnode"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"boolnode"}],"output":{"name":"boolnode"}}],[11,"compile","","",7,{"inputs":[{"name":"boolnode"},{"name":"symtable"}],"output":{"name":"compileresult"}}],[11,"print_level","","",7,{"inputs":[{"name":"boolnode"},{"name":"usize"}],"output":{"name":"string"}}],[11,"fmt","","",8,{"inputs":[{"name":"charnode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"charnode"},{"name":"charnode"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"charnode"},{"name":"charnode"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"charnode"}],"output":{"name":"charnode"}}],[11,"compile","","",8,{"inputs":[{"name":"charnode"},{"name":"symtable"}],"output":{"name":"compileresult"}}],[11,"print_level","","",8,{"inputs":[{"name":"charnode"},{"name":"usize"}],"output":{"name":"string"}}],[11,"fmt","","",9,{"inputs":[{"name":"stringnode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"stringnode"},{"name":"stringnode"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"stringnode"},{"name":"stringnode"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"stringnode"}],"output":{"name":"stringnode"}}],[11,"compile","","",9,{"inputs":[{"name":"stringnode"},{"name":"symtable"}],"output":{"name":"compileresult"}}],[11,"print_level","","",9,{"inputs":[{"name":"stringnode"},{"name":"usize"}],"output":{"name":"string"}}],[0,"parser","seax_scheme","Contains the Scheme parser.",null,null],[5,"sint_const","seax_scheme::parser","Parser for signed integer constants.",null,{"inputs":[{"name":"state"}],"output":{"name":"parseresult"}}],[5,"uint_const","","Parser for unsigned integer constants.",null,{"inputs":[{"name":"state"}],"output":{"name":"parseresult"}}],[5,"float_const","","Parser for floating-point constants.",null,{"inputs":[{"name":"state"}],"output":{"name":"parseresult"}}],[5,"bool_const","","Parses boolean constants.",null,{"inputs":[{"name":"state"}],"output":{"name":"parseresult"}}],[5,"number","","Parses a floating-point, signed integer, or unsigned integer constant.",null,{"inputs":[{"name":"state"}],"output":{"name":"parseresult"}}],[5,"name","","Parser for valid R6RS identifiers.",null,{"inputs":[{"name":"state"}],"output":{"name":"parseresult"}}],[5,"character","","Recognizes R<sup>6</sup>RS character constants.",null,{"inputs":[{"name":"state"}],"output":{"name":"parseresult"}}],[5,"line_comment","","Parses a R<sup>6</sup>RS single-line comment",null,{"inputs":[{"name":"state"}],"output":{"name":"parseresult"}}],[5,"string_const","","",null,{"inputs":[{"name":"state"}],"output":{"name":"parseresult"}}],[5,"expr","","Parses Scheme expressions.",null,{"inputs":[{"name":"state"}],"output":{"name":"parseresult"}}],[5,"parse","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","seax_scheme","",13,{"inputs":[{"name":"forktable"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Returns a reference to the value corresponding to the key.",13,{"inputs":[{"name":"forktable"},{"name":"k"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",13,{"inputs":[{"name":"forktable"},{"name":"k"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if\nthe key was previously in the map.",13,{"inputs":[{"name":"forktable"},{"name":"k"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair from the map.",13,{"inputs":[{"name":"forktable"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if this level contains a value for the specified key.",13,{"inputs":[{"name":"forktable"},{"name":"k"}],"output":{"name":"bool"}}],[11,"chain_contains_key","","Returns true if the key is defined in this level of the table, or\nin any of its' parents and is not whited out.",13,{"inputs":[{"name":"forktable"},{"name":"k"}],"output":{"name":"bool"}}],[11,"fork","","Forks this table, returning a new `ForkTable<K,V>`.",13,{"inputs":[{"name":"forktable"}],"output":{"name":"forktable"}}],[11,"new","","Constructs a new `ForkTable<K,V>`",13,{"inputs":[{"name":"forktable"}],"output":{"name":"forktable"}}]],"paths":[[3,"RootNode"],[3,"SExprNode"],[3,"ListNode"],[3,"NameNode"],[3,"IntNode"],[3,"UIntNode"],[3,"FloatNode"],[3,"BoolNode"],[3,"CharNode"],[3,"StringNode"],[4,"ExprNode"],[4,"NumNode"],[8,"ASTNode"],[3,"ForkTable"]]};
searchIndex['docopt'] = {"items":[[0,"","docopt","Docopt for Rust. This implementation conforms to the\n[official description of Docopt](http://docopt.org/) and\n[passes its test suite](https://github.com/docopt/docopt/pull/201).",null,null],[3,"ArgvMap","","A map containing matched values from command line arguments.",null,null],[3,"Decoder","","Decoder for `ArgvMap` into your own `Decodable` types.",null,null],[3,"Docopt","","The main Docopt type, which is constructed with a Docopt usage string.",null,null],[4,"Error","","Represents the different types of Docopt errors.",null,null],[13,"Usage","","Parsing the usage string failed.",0,null],[13,"Argv","","Parsing the argv specified failed.",0,null],[13,"NoMatch","","The given argv parsed successfully, but it did not match any example\nusage of the program.",0,null],[13,"Decode","","This indicates a problem decoding a successful argv match into a\ndecodable value.",0,null],[13,"WithProgramUsage","","Parsing failed, and the program usage should be printed next to the\nfailure message. Typically this wraps `Argv` and `NoMatch` errors.",0,null],[13,"Help","","Decoding or parsing failed because the command line specified that the\nhelp message should be printed.",0,null],[13,"Version","","Decoding or parsing failed because the command line specified that the\nversion should be printed",0,null],[4,"Value","","A matched command line value.",null,null],[13,"Switch","","A boolean value from a flag that has no argument.",1,null],[13,"Counted","","The number of occurrences of a repeated flag.",1,null],[13,"Plain","","A positional or flag argument.",1,null],[13,"List","","A List of positional or flag arguments.",1,null],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fatal","","Return whether this was a fatal error or not.",0,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"exit","","Print this error and immediately exit the program.",0,{"inputs":[{"name":"error"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"docopt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"docopt"}],"output":{"name":"docopt"}}],[11,"new","","Parse the Docopt usage string given.",2,{"inputs":[{"name":"docopt"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","Parse and decode the given argv.",2,{"inputs":[{"name":"docopt"}],"output":{"name":"result"}}],[11,"parse","","Parse command line arguments and try to match them against a usage\npattern specified in the Docopt string.",2,{"inputs":[{"name":"docopt"}],"output":{"name":"result"}}],[11,"argv","","Set the argv to be used for Docopt parsing.",2,{"inputs":[{"name":"docopt"},{"name":"i"}],"output":{"name":"docopt"}}],[11,"options_first","","Enables the \"options first\" Docopt behavior.",2,{"inputs":[{"name":"docopt"},{"name":"bool"}],"output":{"name":"docopt"}}],[11,"help","","Enables automatic handling of `--help`.",2,{"inputs":[{"name":"docopt"},{"name":"bool"}],"output":{"name":"docopt"}}],[11,"version","","Enables automatic handling of `--version`.",2,{"inputs":[{"name":"docopt"},{"name":"option"}],"output":{"name":"docopt"}}],[11,"clone","","",3,{"inputs":[{"name":"argvmap"}],"output":{"name":"argvmap"}}],[11,"decode","","Tries to decode the map of values into a struct.",3,{"inputs":[{"name":"argvmap"}],"output":{"name":"result"}}],[11,"get_bool","","Finds the value corresponding to `key` and calls `as_bool()` on it.\nIf the key does not exist, `false` is returned.",3,{"inputs":[{"name":"argvmap"},{"name":"str"}],"output":{"name":"bool"}}],[11,"get_count","","Finds the value corresponding to `key` and calls `as_count()` on it.\nIf the key does not exist, `0` is returned.",3,{"inputs":[{"name":"argvmap"},{"name":"str"}],"output":{"name":"u64"}}],[11,"get_str","","Finds the value corresponding to `key` and calls `as_str()` on it.\nIf the key does not exist, `\"\"` is returned.",3,{"inputs":[{"name":"argvmap"},{"name":"str"}],"output":{"name":"str"}}],[11,"get_vec","","Finds the value corresponding to `key` and calls `as_vec()` on it.\nIf the key does not exist, `vec!()` is returned.",3,{"inputs":[{"name":"argvmap"},{"name":"str"}],"output":{"name":"vec"}}],[11,"find","","Return the raw value corresponding to some `key`.",3,{"inputs":[{"name":"argvmap"},{"name":"str"}],"output":{"name":"option"}}],[11,"len","","Return the number of values, not including synonyms.",3,{"inputs":[{"name":"argvmap"}],"output":{"name":"usize"}}],[11,"fmt","","",3,{"inputs":[{"name":"argvmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"as_bool","","Returns the value as a bool.",1,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_count","","Returns the value as a count of the number of times it occurred.",1,{"inputs":[{"name":"value"}],"output":{"name":"u64"}}],[11,"as_str","","Returns the value as a string.",1,{"inputs":[{"name":"value"}],"output":{"name":"str"}}],[11,"as_vec","","Returns the value as a list of strings.",1,{"inputs":[{"name":"value"}],"output":{"name":"vec"}}],[11,"error","","",4,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[11,"read_nil","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_usize","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u64","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u32","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u16","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u8","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_isize","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i64","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i32","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i16","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i8","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_bool","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_f64","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_f32","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_char","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_str","","",4,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_enum","","",4,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",4,null],[11,"read_enum_variant_arg","","",4,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",4,null],[11,"read_enum_struct_variant_field","","",4,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",4,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",4,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",4,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",4,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",4,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",4,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",4,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",4,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",4,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",4,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",4,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",4,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[4,"Value"],[3,"Docopt"],[3,"ArgvMap"],[3,"Decoder"]]};
searchIndex['rustc_serialize'] = {"items":[[0,"","rustc_serialize","Support code for encoding and decoding types.",null,null],[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",3,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",4,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",5,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",6,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",8,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",10,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",11,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",12,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",13,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",14,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",15,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",16,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",17,null],[12,"newline","","Newline to use",17,null],[12,"pad","","True to pad output with `=` characters",17,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",17,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",18,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",18,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",19,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",19,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",20,null],[13,"InvalidBase64Length","","The input had an invalid length",20,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",21,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",22,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"clone","","",19,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"clone","","",17,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",20,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",20,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",20,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",20,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",23,null],[13,"InvalidHexLength","","The input had an invalid length",23,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",24,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",25,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",23,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",23,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",23,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",26,null],[13,"U64","","",26,null],[13,"F64","","",26,null],[13,"String","","",26,null],[13,"Boolean","","",26,null],[13,"Array","","",26,null],[13,"Object","","",26,null],[13,"Null","","",26,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",27,null],[13,"InvalidNumber","","",27,null],[13,"EOFWhileParsingObject","","",27,null],[13,"EOFWhileParsingArray","","",27,null],[13,"EOFWhileParsingValue","","",27,null],[13,"EOFWhileParsingString","","",27,null],[13,"KeyMustBeAString","","",27,null],[13,"ExpectedColon","","",27,null],[13,"TrailingCharacters","","",27,null],[13,"TrailingComma","","",27,null],[13,"InvalidEscape","","",27,null],[13,"InvalidUnicodeCodePoint","","",27,null],[13,"LoneLeadingSurrogateInHexEscape","","",27,null],[13,"UnexpectedEndOfHexEscape","","",27,null],[13,"UnrecognizedHex","","",27,null],[13,"NotFourDigit","","",27,null],[13,"ControlCharacterInString","","",27,null],[13,"NotUtf8","","",27,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",28,null],[13,"IoError","","",28,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",29,null],[13,"ExpectedError","","",29,null],[13,"MissingFieldError","","",29,null],[13,"UnknownVariantError","","",29,null],[13,"ApplicationError","","",29,null],[13,"EOF","","",29,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",30,null],[13,"BadHashmapKey","","",30,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",31,null],[13,"ObjectEnd","","",31,null],[13,"ArrayStart","","",31,null],[13,"ArrayEnd","","",31,null],[13,"BooleanValue","","",31,null],[13,"I64Value","","",31,null],[13,"U64Value","","",31,null],[13,"F64Value","","",31,null],[13,"StringValue","","",31,null],[13,"NullValue","","",31,null],[13,"Error","","",31,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",32,null],[13,"Key","","",32,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",33,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",26,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",27,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",28,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"encodererror"}],"output":{"name":"encodererror"}}],[11,"fmt","","",27,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",29,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",29,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",29,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",28,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",28,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",30,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"encodererror"},{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",34,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",34,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",34,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[6,"Error","","",null,null],[11,"emit_nil","","",34,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",34,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",34,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",34,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",34,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",34,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",34,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",34,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",34,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",34,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",34,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",34,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",34,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",34,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",34,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",34,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",34,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",34,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",34,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",34,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",26,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",26,{"inputs":[{"name":"json"},{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",26,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",26,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",26,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[6,"Output","","",null,null],[11,"index","","",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[6,"Output","","",null,null],[11,"index","","",26,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",31,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",32,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",35,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",35,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",35,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",35,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",35,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",35,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",35,null],[11,"top","","Returns the top-most element (if any).",35,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[6,"Item","","",null,null],[11,"next","","",36,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",36,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",36,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",37,{"inputs":[{"name":"builder"},{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",37,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",38,{"inputs":[{"name":"decoder"},{"name":"json"}],"output":{"name":"decoder"}}],[6,"Error","","",null,null],[11,"read_nil","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",38,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",38,null],[11,"read_enum_variant_arg","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",38,null],[11,"read_enum_struct_variant_field","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",38,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",38,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",38,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",38,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",38,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",38,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",26,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",3,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",13,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",15,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",4,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",26,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",39,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",41,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Err","","",null,null],[11,"from_str","","",26,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",3,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",4,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",5,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",6,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",7,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",8,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",10,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","rustc_serialize::Decoder","",null,null],[10,"read_nil","rustc_serialize","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",42,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",42,null],[10,"read_enum_variant_arg","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",42,null],[10,"read_enum_struct_variant_field","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",42,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",42,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",42,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",42,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",42,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",42,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","rustc_serialize::Encoder","",null,null],[10,"emit_nil","rustc_serialize","",43,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",43,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",43,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",43,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",43,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",43,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",43,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",43,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",43,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",43,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",43,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",43,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",43,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",43,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",43,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",43,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",43,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",43,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",43,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",43,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",44,{"inputs":[{"name":"decodable"},{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",45,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",46,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",47,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['regex'] = {"items":[[0,"","regex","This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst case performance. The specific syntax supported is\ndocumented further down.",null,null],[3,"Error","","Error corresponds to something that can go wrong while parsing\na regular expression.",null,null],[12,"pos","","The *approximate* character index of where the error occurred.",0,null],[12,"msg","","A message describing the error.",0,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group\nname and the value.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Regex","","A compiled regular expression",null,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"regex"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",1,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",1,{"inputs":[{"name":"regex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Compiles a dynamic regular expression. Once compiled, it can be\nused repeatedly to search, split or replace text in a string.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findmatches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter` (except it\nyields information about submatches).",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"findcaptures"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match\nof the regular expression.\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.",1,{"inputs":[{"name":"regex"},{"name":"str"}],"output":{"name":"regexsplits"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.)\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.\nThe remainder of the string that is not split will be the last element\nin the iterator.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"}],"output":{"name":"regexsplitsn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches'\n`Captures` and returns the replaced string.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the\nreplacement provided. This is the same as calling `replacen` with\n`limit` set to `0`.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",1,{"inputs":[{"name":"regex"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"string"}}],[11,"as_str","","Returns the original string of this regex.",1,{"inputs":[{"name":"regex"}],"output":{"name":"str"}}],[11,"reg_replace","","",2,{"inputs":[{"name":"noexpand"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"next","","",3,{"inputs":[{"name":"regexsplits"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"regexsplitsn"}],"output":{"name":"option"}}],[11,"pos","","Returns the start and end positions of the Nth capture group.\nReturns `None` if `i` is not a valid capture group or if the capture\ngroup did not match anything.\nThe positions returned are *always* byte indices with respect to the\noriginal string matched.",5,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't\na valid capture group or didn't match anything, then `None` is\nreturned.",5,{"inputs":[{"name":"captures"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn't a valid capture group or didn't match anything, then\n`None` is returned.",5,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",5,{"inputs":[{"name":"captures"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",5,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",5,{"inputs":[{"name":"captures"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",5,{"inputs":[{"name":"captures"},{"name":"str"}],"output":{"name":"string"}}],[11,"len","","Returns the number of captured groups.",5,{"inputs":[{"name":"captures"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns if there are no captured groups.",5,{"inputs":[{"name":"captures"}],"output":{"name":"bool"}}],[11,"next","","",6,{"inputs":[{"name":"subcaptures"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"subcapturespos"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"subcapturesnamed"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"findcaptures"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"findmatches"}],"output":{"name":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",11,{"inputs":[{"name":"replacer"},{"name":"captures"}],"output":{"name":"cow"}}]],"paths":[[3,"Error"],[4,"Regex"],[3,"NoExpand"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex['parser_combinators'] = {"items":[[0,"","parser_combinators","This crate contains parser combinators, roughly based on the Haskell library [parsec](http://hackage.haskell.org/package/parsec).",null,null],[3,"ParseError","","Struct which hold information about an error that occured at a specific position.\nCan hold multiple instances of `Error` if more that one error occured at the position.",null,null],[12,"position","","The position where the error occured",0,null],[12,"errors","","A vector containing specific information on what errors occured at `position`",0,null],[5,"from_iter","","Converts an `Iterator` into a stream.",null,{"inputs":[{"name":"i"}],"output":{"name":"iteratorstream"}}],[5,"any_char","","Parses any character",null,{"inputs":[{"name":"state"}],"output":{"name":"parseresult"}}],[5,"digit","","Parses a digit from a stream containing characters",null,{"inputs":[],"output":{"name":"digit"}}],[5,"space","","Parses whitespace",null,{"inputs":[],"output":{"name":"space"}}],[5,"spaces","","Skips over zero or more spaces",null,{"inputs":[],"output":{"name":"spaces"}}],[5,"newline","","Parses a newline character",null,{"inputs":[],"output":{"name":"newline"}}],[5,"crlf","","Parses carriage return and newline, returning the newline character.",null,{"inputs":[],"output":{"name":"crlf"}}],[5,"tab","","Parses a tab character",null,{"inputs":[],"output":{"name":"tab"}}],[5,"upper","","Parses an uppercase letter",null,{"inputs":[],"output":{"name":"upper"}}],[5,"lower","","Parses an lowercase letter",null,{"inputs":[],"output":{"name":"lower"}}],[5,"letter","","Parses an alphabet letter",null,{"inputs":[],"output":{"name":"letter"}}],[5,"alpha_num","","Parses either an alphabet letter or digit",null,{"inputs":[],"output":{"name":"alphanum"}}],[5,"hex_digit","","Parses a hexdecimal digit with uppercase and lowercase",null,{"inputs":[],"output":{"name":"hexdigit"}}],[5,"oct_digit","","Parses an octal digit",null,{"inputs":[],"output":{"name":"octdigit"}}],[5,"string","","Parses the string `s`",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"satisfy","","Parses a character and succeeds depending on the result of `pred`",null,{"inputs":[{"name":"pred"}],"output":{"name":"satisfy"}}],[5,"between","","Parses `open` followed by `parser` followed by `close`\nReturns the value of `parser`",null,{"inputs":[{"name":"l"},{"name":"r"},{"name":"p"}],"output":{"name":"between"}}],[5,"chainl1","","Parses `p` 1 or more times separated by `op`\nThe value returned is the one produced by the left associative application of `op`",null,{"inputs":[{"name":"p"},{"name":"op"}],"output":{"name":"chainl1"}}],[5,"choice_slice","","",null,null],[5,"choice_vec","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"choicevec"}}],[5,"many","","Parses `p` zero or more times returning a collection with the values from `p`.\nIf the returned collection cannot be inferred type annotations must be supplied, either by\nannotating the resulting type binding `let collection: Vec<_> = ...` or by specializing when\ncalling many, `many::<Vec<_>, _>(...)`",null,{"inputs":[{"name":"p"}],"output":{"name":"many"}}],[5,"many1","","Parses `p` one or more times returning a collection with the values from `p`.\nIf the returned collection cannot be inferred type annotations must be supplied, either by\nannotating the resulting type binding `let collection: Vec<_> = ...` or by specializing when\ncalling many1 `many1::<Vec<_>, _>(...)`",null,{"inputs":[{"name":"p"}],"output":{"name":"many1"}}],[5,"optional","","Returns `Some(value)` and `None` on parse failure (always succeeds)",null,{"inputs":[{"name":"p"}],"output":{"name":"optional"}}],[5,"parser","","Wraps a function, turning it into a parser\nMainly needed to turn closures into parsers as function types can be casted to function pointers\nto make them usable as a parser",null,{"inputs":[{"name":"f"}],"output":{"name":"fnparser"}}],[5,"sep_by","","Parses `parser` zero or more time separated by `separator`, returning a collection with the values from `p`.\nIf the returned collection cannot be inferred type annotations must be supplied, either by\nannotating the resulting type binding `let collection: Vec<_> = ...` or by specializing when\ncalling sep_by, `sep_by::<Vec<_>, _, _>(...)`",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sepby"}}],[5,"skip_many","","Parses `p` zero or more times ignoring the result",null,{"inputs":[{"name":"p"}],"output":{"name":"skipmany"}}],[5,"skip_many1","","Parses `p` one or more times ignoring the result",null,{"inputs":[{"name":"p"}],"output":{"name":"skipmany1"}}],[5,"try","","Try acts as `p` except it acts as if the parser hadn't consumed any input\nif `p` returns an error after consuming input",null,{"inputs":[{"name":"p"}],"output":{"name":"try"}}],[5,"value","","Always returns the value `v` without consuming any input.",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"unexpected","","Always fails with `message` as the error.\nNever consumes any input.",null,{"inputs":[{"name":"s"}],"output":{"name":"unexpected"}}],[5,"not_followed_by","","Succeeds only if `parser` fails.\nNever consumes any input.",null,{"inputs":[{"name":"p"}],"output":{"name":"notfollowedby"}}],[0,"primitives","","Module containing the primitive types which is used to create and compose more advanced parsers",null,null],[3,"SourcePosition","parser_combinators::primitives","Struct which containing the current position",null,null],[12,"line","","Current line of the input",1,null],[12,"column","","Current column of the input",1,null],[3,"ParseError","","Struct which hold information about an error that occured at a specific position.\nCan hold multiple instances of `Error` if more that one error occured at the position.",null,null],[12,"position","","The position where the error occured",0,null],[12,"errors","","A vector containing specific information on what errors occured at `position`",0,null],[3,"State","","The `State<I>` struct keeps track of the current position in the stream `I`",null,null],[12,"position","","",2,null],[12,"input","","",2,null],[3,"IteratorStream","","",null,null],[4,"Error","","Enum used to store information about an error that has occured",null,null],[13,"Unexpected","","Error indicating an unexpected token has been encountered in the stream",3,null],[13,"Expected","","Error indicating that the parser expected something else",3,null],[13,"Message","","Generic message",3,null],[4,"Consumed","","Enum used to indicate if a stream has had any elements consumed",null,null],[13,"Consumed","","Constructor indicating that the parser has consumed elements",4,null],[13,"Empty","","Constructor indicating that the parser did not consume any elements",4,null],[5,"from_iter","","Converts an `Iterator` into a stream.",null,{"inputs":[{"name":"i"}],"output":{"name":"iteratorstream"}}],[6,"ParseResult","","A type alias over the specific `Result` type used to indicated parser success/failure.\n`O` is the type that is output on success\n`I` is the specific stream type used in the parser",null,null],[8,"Stream","","A stream is a sequence of items that can be extracted one by one",null,null],[16,"Item","parser_combinators::primitives::Stream","",null,null],[10,"uncons","parser_combinators::primitives","Takes a stream and removes its first item, yielding the item and the rest of the elements\nReturns `Err` when no more elements could be retrieved",5,{"inputs":[{"name":"stream"}],"output":{"name":"result"}}],[8,"Parser","","By implementing the `Parser` trait a type says that it can be used to parse an input stream into\nthe type `Output`.",null,null],[16,"Input","parser_combinators::primitives::Parser","A type implementing the `Stream` trait which is the specific type\nthat is parsed.",null,null],[16,"Output","","The type which is returned when the parsing is successful.",null,null],[11,"parse","parser_combinators::primitives","Entrypoint of the parser\nTakes some input and tries to parse it returning a `ParseResult`",6,{"inputs":[{"name":"parser"},{"name":"input"}],"output":{"name":"result"}}],[10,"parse_state","","Parses using the state `input` by calling Stream::uncons one or more times\nOn success returns `Ok((value, new_state))` on failure it returns `Err(error)`",6,{"inputs":[{"name":"parser"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"sourceposition"},{"name":"sourceposition"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"sourceposition"},{"name":"sourceposition"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"sourceposition"},{"name":"sourceposition"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"sourceposition"},{"name":"sourceposition"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"sourceposition"},{"name":"sourceposition"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"sourceposition"},{"name":"sourceposition"}],"output":{"name":"ordering"}}],[11,"eq","","",1,{"inputs":[{"name":"sourceposition"},{"name":"sourceposition"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"sourceposition"},{"name":"sourceposition"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"sourceposition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"sourceposition"}],"output":{"name":"sourceposition"}}],[11,"fmt","","",3,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",4,{"inputs":[{"name":"consumed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"consumed"},{"name":"consumed"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"consumed"},{"name":"consumed"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"consumed"}],"output":{"name":"consumed"}}],[11,"is_empty","","Returns true if the `self` is empty",4,{"inputs":[{"name":"consumed"}],"output":{"name":"bool"}}],[11,"into_inner","","Extracts the contained value",4,{"inputs":[{"name":"consumed"}],"output":{"name":"t"}}],[11,"as_consumed","","Converts the consumed state into the Consumed state",4,{"inputs":[{"name":"consumed"}],"output":{"name":"consumed"}}],[11,"as_empty","","Converts the consumed state into the Empty state",4,{"inputs":[{"name":"consumed"}],"output":{"name":"consumed"}}],[11,"map","","Maps over the contained value without changing the consumed state",4,{"inputs":[{"name":"consumed"},{"name":"f"}],"output":{"name":"consumed"}}],[11,"combine","","Combines the Consumed flags from `self` and the result of `f`",4,{"inputs":[{"name":"consumed"},{"name":"f"}],"output":{"name":"parseresult"}}],[11,"eq","","",0,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"new","","",0,{"inputs":[{"name":"parseerror"},{"name":"sourceposition"},{"name":"error"}],"output":{"name":"parseerror"}}],[11,"add_message","","",0,{"inputs":[{"name":"parseerror"},{"name":"s"}],"output":null}],[11,"add_error","","",0,{"inputs":[{"name":"parseerror"},{"name":"error"}],"output":null}],[11,"set_expected","","",0,{"inputs":[{"name":"parseerror"},{"name":"cow"}],"output":null}],[11,"merge","","",0,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"description","","",0,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"sourceposition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"new","","",2,{"inputs":[{"name":"state"},{"name":"i"}],"output":{"name":"state"}}],[11,"as_empty","","",2,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"uncons","","`uncons` is the most general way of extracting and item from a stream\nIt takes a function `f` as argument which should update the position\naccording to the item that was extracted\nUsually you want to use `uncons_char` instead which works directly on character streams",2,{"inputs":[{"name":"state"},{"name":"f"}],"output":{"name":"parseresult"}}],[11,"uncons_char","","Specialized uncons function for character streams which updates the position\nwith no further action needed",2,{"inputs":[{"name":"state"}],"output":{"name":"parseresult"}}],[6,"Item","","",null,null],[6,"Item","","",null,null],[11,"fmt","","",7,{"inputs":[{"name":"iteratorstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"iteratorstream"}],"output":{"name":"iteratorstream"}}],[6,"Item","","",null,null],[11,"uncons","","",7,{"inputs":[{"name":"iteratorstream"}],"output":{"name":"result"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","alloc::boxed","",8,{"inputs":[{"name":"box"},{"name":"state"}],"output":{"name":"parseresult"}}],[0,"combinator","parser_combinators","Module containing all specific parsers",null,null],[3,"ChoiceSlice","parser_combinators::combinator","",null,null],[3,"ChoiceVec","","",null,null],[3,"Unexpected","","",null,null],[3,"Value","","",null,null],[3,"NotFollowedBy","","",null,null],[3,"Many","","",null,null],[3,"Many1","","",null,null],[3,"SkipMany","","",null,null],[3,"SkipMany1","","",null,null],[3,"SepBy","","",null,null],[3,"FnParser","","",null,null],[3,"Optional","","",null,null],[3,"Between","","",null,null],[3,"Chainl1","","",null,null],[3,"Chainr1","","",null,null],[3,"Try","","",null,null],[3,"And","","",null,null],[3,"With","","",null,null],[3,"Skip","","",null,null],[3,"Message","","",null,null],[3,"Or","","",null,null],[3,"Map","","",null,null],[3,"Then","","",null,null],[3,"Expected","","",null,null],[5,"choice_slice","","",null,null],[5,"choice_vec","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"choicevec"}}],[5,"unexpected","","Always fails with `message` as the error.\nNever consumes any input.",null,{"inputs":[{"name":"s"}],"output":{"name":"unexpected"}}],[5,"value","","Always returns the value `v` without consuming any input.",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"not_followed_by","","Succeeds only if `parser` fails.\nNever consumes any input.",null,{"inputs":[{"name":"p"}],"output":{"name":"notfollowedby"}}],[5,"many","","Parses `p` zero or more times returning a collection with the values from `p`.\nIf the returned collection cannot be inferred type annotations must be supplied, either by\nannotating the resulting type binding `let collection: Vec<_> = ...` or by specializing when\ncalling many, `many::<Vec<_>, _>(...)`",null,{"inputs":[{"name":"p"}],"output":{"name":"many"}}],[5,"skip_many","","Parses `p` zero or more times ignoring the result",null,{"inputs":[{"name":"p"}],"output":{"name":"skipmany"}}],[5,"skip_many1","","Parses `p` one or more times ignoring the result",null,{"inputs":[{"name":"p"}],"output":{"name":"skipmany1"}}],[5,"many1","","Parses `p` one or more times returning a collection with the values from `p`.\nIf the returned collection cannot be inferred type annotations must be supplied, either by\nannotating the resulting type binding `let collection: Vec<_> = ...` or by specializing when\ncalling many1 `many1::<Vec<_>, _>(...)`",null,{"inputs":[{"name":"p"}],"output":{"name":"many1"}}],[5,"sep_by","","Parses `parser` zero or more time separated by `separator`, returning a collection with the values from `p`.\nIf the returned collection cannot be inferred type annotations must be supplied, either by\nannotating the resulting type binding `let collection: Vec<_> = ...` or by specializing when\ncalling sep_by, `sep_by::<Vec<_>, _, _>(...)`",null,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"sepby"}}],[5,"parser","","Wraps a function, turning it into a parser\nMainly needed to turn closures into parsers as function types can be casted to function pointers\nto make them usable as a parser",null,{"inputs":[{"name":"f"}],"output":{"name":"fnparser"}}],[5,"optional","","Returns `Some(value)` and `None` on parse failure (always succeeds)",null,{"inputs":[{"name":"p"}],"output":{"name":"optional"}}],[5,"between","","Parses `open` followed by `parser` followed by `close`\nReturns the value of `parser`",null,{"inputs":[{"name":"l"},{"name":"r"},{"name":"p"}],"output":{"name":"between"}}],[5,"chainl1","","Parses `p` 1 or more times separated by `op`\nThe value returned is the one produced by the left associative application of `op`",null,{"inputs":[{"name":"p"},{"name":"op"}],"output":{"name":"chainl1"}}],[5,"chainr1","","Parses `p` one or more times separated by `op`\nThe value returned is the one produced by the right associative application of `op`",null,{"inputs":[{"name":"p"},{"name":"op"}],"output":{"name":"chainr1"}}],[5,"try","","Try acts as `p` except it acts as if the parser hadn't consumed any input\nif `p` returns an error after consuming input",null,{"inputs":[{"name":"p"}],"output":{"name":"try"}}],[8,"ParserExt","","Extension trait which provides functions that are more conveniently used through method calls",null,null],[11,"with","","Discards the value of the `self` parser and returns the value of `p`\nFails if any of the parsers fails",9,{"inputs":[{"name":"parserext"},{"name":"p2"}],"output":{"name":"with"}}],[11,"skip","","Discards the value of the `p` parser and returns the value of `self`\nFails if any of the parsers fails",9,{"inputs":[{"name":"parserext"},{"name":"p2"}],"output":{"name":"skip"}}],[11,"and","","Parses with `self` followed by `p`\nSucceds if both parsers succed, otherwise fails\nReturns a tuple with both values on success",9,{"inputs":[{"name":"parserext"},{"name":"p2"}],"output":{"name":"and"}}],[11,"or","","Tries to parse using `self` and if it fails returns the result of parsing `p`",9,{"inputs":[{"name":"parserext"},{"name":"p2"}],"output":{"name":"or"}}],[11,"then","","Parses using `self` and then passes the value to `f` which returns the parser used to parse\nthe rest of the input",9,{"inputs":[{"name":"parserext"},{"name":"f"}],"output":{"name":"then"}}],[11,"map","","Uses `f` to map over the parsed value",9,{"inputs":[{"name":"parserext"},{"name":"f"}],"output":{"name":"map"}}],[11,"message","","Parses with `self` and if it fails, adds the message `msg` to the error",9,{"inputs":[{"name":"parserext"},{"name":"s"}],"output":{"name":"message"}}],[11,"expected","","Parses with `self` and if it fails without consuming any input any expected errors are replaced by\n`msg`. `msg` is then used in error messages as \"Expected `msg`\".",9,{"inputs":[{"name":"parserext"},{"name":"s"}],"output":{"name":"expected"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",10,{"inputs":[{"name":"choiceslice"},{"name":"state"}],"output":{"name":"parseresult"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",11,{"inputs":[{"name":"choicevec"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",12,{"inputs":[{"name":"unexpected"}],"output":{"name":"unexpected"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",12,{"inputs":[{"name":"unexpected"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",13,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",13,{"inputs":[{"name":"value"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",14,{"inputs":[{"name":"notfollowedby"}],"output":{"name":"notfollowedby"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",14,{"inputs":[{"name":"notfollowedby"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",15,{"inputs":[{"name":"many"}],"output":{"name":"many"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",15,{"inputs":[{"name":"many"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",16,{"inputs":[{"name":"many1"}],"output":{"name":"many1"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",16,{"inputs":[{"name":"many1"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",17,{"inputs":[{"name":"skipmany"}],"output":{"name":"skipmany"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",17,{"inputs":[{"name":"skipmany"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",18,{"inputs":[{"name":"skipmany1"}],"output":{"name":"skipmany1"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",18,{"inputs":[{"name":"skipmany1"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",19,{"inputs":[{"name":"sepby"}],"output":{"name":"sepby"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",19,{"inputs":[{"name":"sepby"},{"name":"state"}],"output":{"name":"parseresult"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","parser_combinators","",20,{"inputs":[{"name":"fnmut"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","parser_combinators::combinator","",21,{"inputs":[{"name":"fnparser"}],"output":{"name":"fnparser"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",21,{"inputs":[{"name":"fnparser"},{"name":"state"}],"output":{"name":"parseresult"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"clone","","",22,{"inputs":[{"name":"optional"}],"output":{"name":"optional"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",22,{"inputs":[{"name":"optional"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",23,{"inputs":[{"name":"between"}],"output":{"name":"between"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",23,{"inputs":[{"name":"between"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",24,{"inputs":[{"name":"chainl1"}],"output":{"name":"chainl1"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",24,{"inputs":[{"name":"chainl1"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",25,{"inputs":[{"name":"chainr1"}],"output":{"name":"chainr1"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",25,{"inputs":[{"name":"chainr1"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",26,{"inputs":[{"name":"try"}],"output":{"name":"try"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",26,{"inputs":[{"name":"try"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",27,{"inputs":[{"name":"and"}],"output":{"name":"and"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",27,{"inputs":[{"name":"and"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",28,{"inputs":[{"name":"with"}],"output":{"name":"with"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",28,{"inputs":[{"name":"with"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",29,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",29,{"inputs":[{"name":"skip"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",30,{"inputs":[{"name":"message"}],"output":{"name":"message"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",30,{"inputs":[{"name":"message"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",31,{"inputs":[{"name":"or"}],"output":{"name":"or"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",31,{"inputs":[{"name":"or"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",32,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",32,{"inputs":[{"name":"map"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",33,{"inputs":[{"name":"then"}],"output":{"name":"then"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",33,{"inputs":[{"name":"then"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",34,{"inputs":[{"name":"expected"}],"output":{"name":"expected"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",34,{"inputs":[{"name":"expected"},{"name":"state"}],"output":{"name":"parseresult"}}],[0,"char","parser_combinators","Module containg parsers specialized on character streams",null,null],[3,"Satisfy","parser_combinators::char","",null,null],[3,"Digit","","",null,null],[3,"Space","","",null,null],[3,"Spaces","","",null,null],[3,"NewLine","","",null,null],[3,"CrLf","","",null,null],[3,"Tab","","",null,null],[3,"Upper","","",null,null],[3,"Lower","","",null,null],[3,"AlphaNum","","",null,null],[3,"Letter","","",null,null],[3,"OctDigit","","",null,null],[3,"HexDigit","","",null,null],[3,"String","","",null,null],[5,"any_char","","Parses any character",null,{"inputs":[{"name":"state"}],"output":{"name":"parseresult"}}],[5,"satisfy","","Parses a character and succeeds depending on the result of `pred`",null,{"inputs":[{"name":"pred"}],"output":{"name":"satisfy"}}],[5,"digit","","Parses a digit from a stream containing characters",null,{"inputs":[],"output":{"name":"digit"}}],[5,"space","","Parses whitespace",null,{"inputs":[],"output":{"name":"space"}}],[5,"spaces","","Skips over zero or more spaces",null,{"inputs":[],"output":{"name":"spaces"}}],[5,"newline","","Parses a newline character",null,{"inputs":[],"output":{"name":"newline"}}],[5,"crlf","","Parses carriage return and newline, returning the newline character.",null,{"inputs":[],"output":{"name":"crlf"}}],[5,"tab","","Parses a tab character",null,{"inputs":[],"output":{"name":"tab"}}],[5,"upper","","Parses an uppercase letter",null,{"inputs":[],"output":{"name":"upper"}}],[5,"lower","","Parses an lowercase letter",null,{"inputs":[],"output":{"name":"lower"}}],[5,"alpha_num","","Parses either an alphabet letter or digit",null,{"inputs":[],"output":{"name":"alphanum"}}],[5,"letter","","Parses an alphabet letter",null,{"inputs":[],"output":{"name":"letter"}}],[5,"oct_digit","","Parses an octal digit",null,{"inputs":[],"output":{"name":"octdigit"}}],[5,"hex_digit","","Parses a hexdecimal digit with uppercase and lowercase",null,{"inputs":[],"output":{"name":"hexdigit"}}],[5,"string","","Parses the string `s`",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"clone","","",35,{"inputs":[{"name":"satisfy"}],"output":{"name":"satisfy"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",35,{"inputs":[{"name":"satisfy"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",36,{"inputs":[{"name":"digit"}],"output":{"name":"digit"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",36,{"inputs":[{"name":"digit"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",37,{"inputs":[{"name":"space"}],"output":{"name":"space"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",37,{"inputs":[{"name":"space"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",38,{"inputs":[{"name":"spaces"}],"output":{"name":"spaces"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",38,{"inputs":[{"name":"spaces"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",39,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",39,{"inputs":[{"name":"newline"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",40,{"inputs":[{"name":"crlf"}],"output":{"name":"crlf"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",40,{"inputs":[{"name":"crlf"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",41,{"inputs":[{"name":"tab"}],"output":{"name":"tab"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",41,{"inputs":[{"name":"tab"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",42,{"inputs":[{"name":"upper"}],"output":{"name":"upper"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",42,{"inputs":[{"name":"upper"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",43,{"inputs":[{"name":"lower"}],"output":{"name":"lower"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",43,{"inputs":[{"name":"lower"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",44,{"inputs":[{"name":"alphanum"}],"output":{"name":"alphanum"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",44,{"inputs":[{"name":"alphanum"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",45,{"inputs":[{"name":"letter"}],"output":{"name":"letter"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",45,{"inputs":[{"name":"letter"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",46,{"inputs":[{"name":"octdigit"}],"output":{"name":"octdigit"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",46,{"inputs":[{"name":"octdigit"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",47,{"inputs":[{"name":"hexdigit"}],"output":{"name":"hexdigit"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",47,{"inputs":[{"name":"hexdigit"},{"name":"state"}],"output":{"name":"parseresult"}}],[11,"clone","","",48,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[6,"Input","","",null,null],[6,"Output","","",null,null],[11,"parse_state","","",48,{"inputs":[{"name":"string"},{"name":"state"}],"output":{"name":"parseresult"}}],[6,"ParseResult","parser_combinators","A type alias over the specific `Result` type used to indicated parser success/failure.\n`O` is the type that is output on success\n`I` is the specific stream type used in the parser",null,null],[8,"Parser","","By implementing the `Parser` trait a type says that it can be used to parse an input stream into\nthe type `Output`.",null,null],[16,"Input","parser_combinators::Parser","A type implementing the `Stream` trait which is the specific type\nthat is parsed.",null,null],[16,"Output","","The type which is returned when the parsing is successful.",null,null],[11,"parse","parser_combinators","Entrypoint of the parser\nTakes some input and tries to parse it returning a `ParseResult`",6,{"inputs":[{"name":"parser"},{"name":"input"}],"output":{"name":"result"}}],[10,"parse_state","","Parses using the state `input` by calling Stream::uncons one or more times\nOn success returns `Ok((value, new_state))` on failure it returns `Err(error)`",6,{"inputs":[{"name":"parser"},{"name":"state"}],"output":{"name":"parseresult"}}],[8,"ParserExt","","Extension trait which provides functions that are more conveniently used through method calls",null,null],[11,"with","","Discards the value of the `self` parser and returns the value of `p`\nFails if any of the parsers fails",9,{"inputs":[{"name":"parserext"},{"name":"p2"}],"output":{"name":"with"}}],[11,"skip","","Discards the value of the `p` parser and returns the value of `self`\nFails if any of the parsers fails",9,{"inputs":[{"name":"parserext"},{"name":"p2"}],"output":{"name":"skip"}}],[11,"and","","Parses with `self` followed by `p`\nSucceds if both parsers succed, otherwise fails\nReturns a tuple with both values on success",9,{"inputs":[{"name":"parserext"},{"name":"p2"}],"output":{"name":"and"}}],[11,"or","","Tries to parse using `self` and if it fails returns the result of parsing `p`",9,{"inputs":[{"name":"parserext"},{"name":"p2"}],"output":{"name":"or"}}],[11,"then","","Parses using `self` and then passes the value to `f` which returns the parser used to parse\nthe rest of the input",9,{"inputs":[{"name":"parserext"},{"name":"f"}],"output":{"name":"then"}}],[11,"map","","Uses `f` to map over the parsed value",9,{"inputs":[{"name":"parserext"},{"name":"f"}],"output":{"name":"map"}}],[11,"message","","Parses with `self` and if it fails, adds the message `msg` to the error",9,{"inputs":[{"name":"parserext"},{"name":"s"}],"output":{"name":"message"}}],[11,"expected","","Parses with `self` and if it fails without consuming any input any expected errors are replaced by\n`msg`. `msg` is then used in error messages as \"Expected `msg`\".",9,{"inputs":[{"name":"parserext"},{"name":"s"}],"output":{"name":"expected"}}]],"paths":[[3,"ParseError"],[3,"SourcePosition"],[3,"State"],[4,"Error"],[4,"Consumed"],[8,"Stream"],[8,"Parser"],[3,"IteratorStream"],[3,"Box"],[8,"ParserExt"],[3,"ChoiceSlice"],[3,"ChoiceVec"],[3,"Unexpected"],[3,"Value"],[3,"NotFollowedBy"],[3,"Many"],[3,"Many1"],[3,"SkipMany"],[3,"SkipMany1"],[3,"SepBy"],[8,"FnMut"],[3,"FnParser"],[3,"Optional"],[3,"Between"],[3,"Chainl1"],[3,"Chainr1"],[3,"Try"],[3,"And"],[3,"With"],[3,"Skip"],[3,"Message"],[3,"Or"],[3,"Map"],[3,"Then"],[3,"Expected"],[3,"Satisfy"],[3,"Digit"],[3,"Space"],[3,"Spaces"],[3,"NewLine"],[3,"CrLf"],[3,"Tab"],[3,"Upper"],[3,"Lower"],[3,"AlphaNum"],[3,"Letter"],[3,"OctDigit"],[3,"HexDigit"],[3,"String"]]};
searchIndex['seax_svm'] = {"items":[[0,"","seax_svm","",null,null],[3,"State","","Represents a SVM machine state",null,null],[5,"eval_program","","Evaluates a program.",null,{"inputs":[{"name":"list"}],"output":{"name":"list"}}],[0,"slist","","Singly-linked list and stack implementations.",null,null],[3,"ListIterator","seax_svm::slist","Wraps a List<T> to allow it to be used as an Iterator<T>",null,null],[4,"List","","Singly-linked cons list.",null,null],[13,"Cons","","Cons cell containing a `T` and a link to the tail",0,null],[13,"Nil","","The empty list.",0,null],[8,"Stack","","Common functions for an immutable Stack abstract data type.",null,null],[10,"push","","Push an item to the top of the stack, returning a new stack",1,{"inputs":[{"name":"stack"},{"name":"t"}],"output":{"name":"self"}}],[10,"pop","","Pop the top element of the stack. Returns an Option on a T and\na new Stack<T> to replace this.",1,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[10,"peek","","Peek at the top item of the stack.",1,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[10,"empty","","Returns an empty stack.",1,{"inputs":[{"name":"stack"}],"output":{"name":"self"}}],[11,"push","","Push an item to the top of the stack, returning a new stack.",0,{"inputs":[{"name":"list"},{"name":"t"}],"output":{"name":"list"}}],[11,"pop","","Pop the top element of the stack.",0,{"inputs":[{"name":"list"}],"output":{"name":"option"}}],[11,"empty","","",0,{"inputs":[{"name":"list"}],"output":{"name":"list"}}],[11,"peek","","Peek at the top element of the stack.",0,{"inputs":[{"name":"list"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"list"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"list"}],"output":{"name":"list"}}],[11,"eq","","",0,{"inputs":[{"name":"list"},{"name":"list"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"list"},{"name":"list"}],"output":{"name":"bool"}}],[11,"new","","Creates a new empty list",0,{"inputs":[{"name":"list"}],"output":{"name":"list"}}],[11,"prepend","","Prepends the given item to the list.",0,{"inputs":[{"name":"list"},{"name":"t"}],"output":{"name":"list"}}],[11,"append","","Appends an item to the end of the list.",0,{"inputs":[{"name":"list"},{"name":"t"}],"output":null}],[11,"length","","Returns the length of the list.",0,{"inputs":[{"name":"list"}],"output":{"name":"usize"}}],[11,"iter","","Provide a forward iterator",0,{"inputs":[{"name":"list"}],"output":{"name":"listiterator"}}],[11,"last","","",0,{"inputs":[{"name":"list"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"list"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Item","","",null,null],[11,"next","","Get the next element from the list.",2,{"inputs":[{"name":"listiterator"}],"output":{"name":"option"}}],[11,"len","","",2,{"inputs":[{"name":"listiterator"}],"output":{"name":"usize"}}],[6,"Output","","",null,null],[11,"index","","",0,{"inputs":[{"name":"list"},{"name":"usize"}],"output":{"name":"t"}}],[6,"Output","","",null,null],[11,"index","","",0,{"inputs":[{"name":"list"},{"name":"isize"}],"output":{"name":"t"}}],[0,"cell","seax_svm","SVM cell types.",null,null],[4,"SVMCell","seax_svm::cell","",null,null],[13,"AtomCell","","",3,null],[13,"ListCell","","",3,null],[13,"InstCell","","",3,null],[4,"Atom","","SVM atom types.",null,null],[13,"UInt","","Unsigned integer atom (machine size)",4,null],[13,"SInt","","Signed integer atom (machine size)",4,null],[13,"Float","","Floating point number atom (64-bits)",4,null],[13,"Char","","UTF-8 character atom",4,null],[4,"Inst","","SVM instruction types",null,null],[13,"NIL","","`nil`",5,null],[13,"LDC","","`ldc`: `L`oa`d` `C`onstant. Loads a constant (atom)",5,null],[13,"LD","","`ld`: `L`oa`d`. Pusizehes a variable onto the stack.",5,null],[13,"LDF","","`ldf`: `L`oa`d` `F`unction.",5,null],[13,"JOIN","","`join`",5,null],[13,"AP","","`ap`: `Ap`ply.",5,null],[13,"RET","","`ret`: `Ret`urn.",5,null],[13,"DUM","","`dum`: `Dum`my.",5,null],[13,"RAP","","`rap`: `R`ecursive `Ap`ply.\nWorks like `ap`, only that it replaces an occurrence of a\ndummy environment with the current one, thusize making recursive\n functions possible.",5,null],[13,"SEL","","`sel`: `Sel`ect branch",5,null],[13,"ADD","","`add`",5,null],[13,"SUB","","`sub`: `Sub`tract",5,null],[13,"MUL","","`mul`: `Mul`tiply",5,null],[13,"DIV","","`div`: `Div`ide",5,null],[13,"FDIV","","`fdiv`: `F`loating-point `div`ide",5,null],[13,"MOD","","`mod`: `Mod`ulo",5,null],[13,"EQ","","`eq`: `Eq`uality of atoms",5,null],[13,"GT","","`gt`: `G`reater `t`han",5,null],[13,"GTE","","`gte`: `G`reater `t`han or `e`qual",5,null],[13,"LT","","`lt`: `L`ess `t`han",5,null],[13,"LTE","","`lte`: `L`ess `t`han or `e`qual",5,null],[13,"ATOM","","`atom`: test if `atom`",5,null],[13,"CAR","","`car`: `C`ontents of `A`ddress `R`egister",5,null],[13,"CDR","","`cdr`: `C`ontents of `D`ecrement `R`egister",5,null],[13,"CONS","","`cons`: `Cons`truct",5,null],[13,"NULL","","`null`: test if `null`",5,null],[13,"STOP","","`stop`: `stop` execution",5,null],[13,"READC","","`readc`: `read` `c`haracter",5,null],[13,"WRITEC","","`writec`: `write` `c`haracter",5,null],[11,"fmt","","",3,{"inputs":[{"name":"svmcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"svmcell"}],"output":{"name":"svmcell"}}],[11,"eq","","",3,{"inputs":[{"name":"svmcell"},{"name":"svmcell"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"svmcell"},{"name":"svmcell"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"svmcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"atom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"atom"}],"output":{"name":"atom"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"atom"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Output","","",null,null],[11,"add","","",4,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"atom"}}],[6,"Output","","",null,null],[11,"sub","","",4,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"atom"}}],[6,"Output","","",null,null],[11,"div","","",4,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"atom"}}],[6,"Output","","",null,null],[11,"mul","","",4,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"atom"}}],[6,"Output","","",null,null],[11,"rem","","",4,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"atom"}}],[11,"eq","","",5,{"inputs":[{"name":"inst"},{"name":"inst"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"inst"},{"name":"inst"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"inst"}],"output":{"name":"inst"}}],[11,"fmt","","",5,{"inputs":[{"name":"inst"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","seax_svm","",6,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"eq","","",6,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"new","","Creates a new empty state",6,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"dump_state","","Dump state to string",6,{"inputs":[{"name":"state"},{"name":"str"}],"output":{"name":"string"}}],[11,"eval","","Evaluates an instruction.",6,{"inputs":[{"name":"state"},{"name":"read"},{"name":"write"},{"name":"bool"}],"output":{"name":"state"}}],[14,"list!","","Convenience macro for making lists.",null,null]],"paths":[[4,"List"],[8,"Stack"],[3,"ListIterator"],[4,"SVMCell"],[4,"Atom"],[4,"Inst"],[3,"State"]]};
initSearch(searchIndex);
